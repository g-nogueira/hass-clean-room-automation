blueprint:
  name: Interactive Cleaning Reminder on Leave (Optimized)
  description: >-
    When leaving home, if a room's cleaning is overdue, sends an actionable notification.
    Includes a 24h snooze option.

    **Prerequisites:**
    - Home Assistant Companion App integration must be enabled.
    - You must create an `input_datetime` helper to track the last cleaned date for the room.
    - You must create a `button` helper that triggers your vacuum or cleaning script.

    **Known Limitations:**
    - The 24-hour snooze is not restart-proof. If Home Assistant is restarted during the snooze period, the reminder will be forgotten.
    - If you leave home again during the 24-hour snooze period, the snooze will be cancelled and a new reminder will be sent.
  domain: automation
  input:
    in_person_entity:
      name: Person
      description: The person to monitor for leaving home.
      selector:
        entity:
          domain: person
    in_notify_device:
      name: Notification Device
      description: The device to send the notification to.
      selector:
        device:
          integration: mobile_app
    in_room_name:
      name: Room Name
      description: The friendly name of the room (e.g., "Living Room").
      default: "Living Room"
    in_last_cleaned_datetime:
      name: Last Cleaned Helper
      description: The input_datetime entity that tracks when the room was last cleaned.
      selector:
        entity:
          domain: input_datetime
    in_clean_button:
      name: Clean Button
      description: The button to press to start cleaning the room.
      selector:
        entity:
          domain: button
    in_overdue_days:
      name: Overdue Days
      description: The number of days after which cleaning is considered overdue.
      default: 1
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: days

# Automation Logic
mode: restart
trigger:
  - platform: zone
    entity_id: '{{person_entity}}'
    zone: zone.home
    event: leave
  # This trigger is now used by the self-contained snooze action.
  - platform: event
    event_type: "request_{{ room_name | slugify }}_clean_check"
condition:
  - condition: state
    entity_id: '{{person_entity}}'
    state: "not_home"
  - condition: template
    value_template: >-
      {{ now() - (states(last_cleaned_datetime) |
      as_datetime(default=now() - timedelta(days=99)) | as_local) >
      timedelta(days=overdue_days) }}
action:
  # Using a variable for the device service makes the code cleaner.
  - variables:
      # This dynamically gets the notify service associated with the selected device.
      notify_service: >
        {{ 'notify.mobile_app_' ~ device_attr(notify_device, 'name') | slugify }}
  - service: "{{ notify_service }}"
    data:
      message: "The {{ room_name }} cleaning is overdue. Start cleaning now?"
      title: "üßπ Time to Clean?"
      data:
        tag: "{{ context.id }}"
        actions:
          - action: START_CLEANING
            title: "‚úÖ Yes, Clean It"
          - action: SNOOZE_CLEANING
            title: "‚è∞ Snooze 24h"
  - wait_for_trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          tag: "{{ context.id }}"
    timeout: "01:00:00"
    continue_on_timeout: false
  - choose:
      - conditions: "{{ wait.trigger.event.data.action == 'START_CLEANING' }}"
        sequence:
          - service: button.press
            target:
              entity_id: clean_button
      - conditions: "{{ wait.trigger.event.data.action == 'SNOOZE_CLEANING' }}"
        sequence:
          # Provide immediate feedback to the user that the snooze was successful.
          - service: "{{ notify_service }}"
            data:
              message: "OK, I'll remind you about the {{ room_name }} again in 24 hours."
              data:
                # Use a unique tag for the confirmation to clear it if needed.
                tag: "cleaning-snooze-confirm-{{ room_name | slugify }}"
          # Implement the 24-hour delay directly within the blueprint action.
          # This makes the blueprint fully self-contained.
          - delay:
              hours: 24
          # Fire the custom event to re-trigger this same automation.
          # This completes the self-contained snooze loop.
          - service: event.fire
            data:
              event_type: "request_{{ room_name | slugify }}_clean_check"
variables:
  person_entity: !input in_person_entity
  notify_device: !input in_notify_device
  room_name: !input in_room_name
  last_cleaned_datetime: !input in_last_cleaned_datetime
  clean_button: !input in_clean_button
  overdue_days: !input in_overdue_days
